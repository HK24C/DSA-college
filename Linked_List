#include<stdio.h>
#include<stdlib.h>
typedef struct lklist{     //self refrential structure
 int info;
 struct lklist *next;    
}node;
void traverseInOrder(node *head);
void insertAtBeg(node **head,int item);
void insertAtEnd(node **head,int item);
void delete_beg(node **head);
void delete_end(node **head);
void insert_after(node *head,int item,int after);
void delete_after(node *head,int item);
node *searchInUnsorted(node *head,int item);
node *searchInsorted(node *head,int item);

int main()
{
    node *head,*temp;
    head=NULL;
    int ch,element,after;
    while(1)
    {
        printf("\n\n******Main Menu********\n");
        printf("\n1.Insert at Begnning");
        printf("\n2.Insert At End");
        printf("\n3.Insert after a given elemnt");
        printf("\n4.Traverse in order");
        printf("\n5.Delete from beggning");
        printf("\n6.Delete from End");
        printf("\n7.Delete after a given element");
        printf("\n8.Exit");

        printf("\nEnter your choice");
        scanf("%d",&ch);

        switch (ch)
        {
        case 1:
            printf("\nEnter element");
            scanf("%d",&element);
            insertAtBeg(&head,element);
            break;
        case 2:
             printf("\nEnter element");
            scanf("%d",&element);
            insertAtEnd(&head,element);
            break;
        case 3:
            printf("\nEnter element");
            scanf("%d",&element);
            printf("\n Enter element after which to insert");
            scanf("%d",&after);
            insert_after(head,element,after);
            break;
        case 4:
            if(head==NULL)
            printf("\nList is Empty");
            else
            traverseInOrder(head);
            printf("\n\n Press any key to continue");
            break;
        case 5:
            delete_beg(&head);
            break;
        case 6:
            delete_end(&head);
            break;
        case 7:
            printf("Enter element after which to delete: ");
            scanf("%d",&after);
            delete_after(head,after);
            break;
        case 8:
            exit(1);        
        default:
            printf("Invalid Choice!");
        }
    }
  return 0;
}
void traverseInOrder(node *head)
{
    while(head!=NULL)
    {
        printf("%d\n",head->info);
        head=head->next;
    }
}
void insertAtBeg(node **head,int item){
    node *ptr;
    ptr=(node*)malloc(sizeof(node));
    ptr->info=item;
    if(head==NULL)
     ptr->next=NULL;
    else
     ptr->next=*head;
     *head=ptr;
}
void insertAtEnd(node **head,int item)
{
    node *ptr,*loc;
    ptr=(node *)malloc(sizeof(node));
    ptr->info=item;
    ptr->next=NULL;
    if(head=NULL)
    {
        *head=ptr;
    }
    else{
        loc=*head;
        while(loc->next!=NULL)
        loc=loc->next;
        loc->next=ptr;
    }
}
void insert_after(node *head,int item,int after)
{
    node *ptr,*loc;
    loc=searchInUnsorted(head,after);
    if(loc==(node *)NULL)
    return;
    ptr=(node *)malloc(sizeof(node));
    ptr->info=item;
    ptr->next=loc->next;
    loc->next=ptr;
}
void delete_beg(node **head)
{
    node *ptr;
    if(*head==NULL)
    return;
    else{
        ptr=*head;
        *head=(*head)->next;
        free(ptr);
    }
}
void delete_end(node **head)
{
    node *ptr,*loc;
    if(*head==NULL)
    return;
    else
    if((*head)->next==(node *)NULL)
    {
        ptr=*head;
        *head=NULL;
        free(ptr);
    }
    else{
        loc=*head;
        ptr=(*head)->next;
        while(ptr->next!=NULL)
        {
            loc=ptr;
            ptr=ptr->next;
        }
        loc->next=NULL;
        free(ptr);
    }
}
node *searchInUnsorted(node *head,int item)
{
    while((head!=NULL)&&(head->info!=item))
    {
        head=head->next;
    }
    return NULL;
}
node *searchInsorted(node *head, int item)
{
    while(head!=NULL)
    {
        if(head->info==item)
        return head;
        else if(item<head->info)
    return NULL;
    else
    head=head->next;    
    }
    return NULL;
}
void delete_after(node *head,int after)
{
    node *ptr,*loc;
    loc=searchInUnsorted(head,after);
    if(loc==(node *)NULL)
    return;
    ptr=loc->next;
    loc->next=ptr->next;
    free(ptr);
}
